# 문제
# 세계는 균형이 잘 잡혀있어야 한다. 양과 음, 빛과 어둠 그리고 왼쪽 괄호와 오른쪽 괄호처럼 말이다.
#
# 정민이의 임무는 어떤 문자열이 주어졌을 때, 괄호들의 균형이 잘 맞춰져 있는지 판단하는 프로그램을 짜는 것이다.
#
# 문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.
#
# 모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.
# 모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.
# 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
# 모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
# 짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.
# 정민이를 도와 문자열이 주어졌을 때 균형잡힌 문자열인지 아닌지를 판단해보자.
#
# 입력
# 하나 또는 여러줄에 걸쳐서 문자열이 주어진다. 각 문자열은 영문 알파벳,
# 공백, 소괄호("( )") 대괄호("[ ]")등으로 이루어져 있으며, 길이는 100글자보다 작거나 같다.
#
# 입력의 종료조건으로 맨 마지막에 점 하나(".")가 들어온다.
# 출력
# 각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.
import sys

while True:
    # 문장들을 원하는 만큼 입력 받기
    sentence = sys.stdin.readline().rstrip()
    # 괄호를 체크할 리스트
    bracket = []
    # 맞으면 1, 틀리면 0
    true_flag = 1

    for i in sentence:
        # 만약 문장에서 '(' 이나 '['이 있으면 bracket리스트에 추가
        if i == '(' or i == '[':
            bracket.append(i)
        # 만약 ']' 가 보이면,
        elif i == ']':
            # bracket 리스트가 비어있지 않고, 여는 괄호가 ']'와 짝이 맞다면,
            if len(bracket) != 0 and bracket[-1] == '[':
                bracket.pop() # 맞는 것은 1, 그리고 결국엔 bracket안에 아무것도 남지 않음
            else:
                true_flag = 0 # 틀렸으면 0 그리고 멈춤
                break
        # 만약 ')' 가 보이면,
        elif i == ')':
            # bracket 리스트가 비어있지 않고, 여는 괄호가 ')'와 짝이 맞다면,
            if len(bracket) != 0 and bracket[-1] == '(':
                bracket.pop() # 맞는 것은 1, 그리고 결국엔 bracket안에 아무것도 남지 않음
            else:
                true_flag = 0 # 틀렸으면 0 그리고 멈춤
                break
    # 만약 '.'이면 종료한다.
    if sentence == '.':
        break

    # 만약 bracket 안에 아무것도 없고, true_flag가 1이면 yes 아니면 no 출력
    if true_flag == 1 and len(bracket) == 0:
        print('yes')
    else:
        print('no')